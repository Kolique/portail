import streamlit as st
import pandas as pd
import io

# =============================================================================
# Fonction principale pour le traitement des donn√©es
# =============================================================================
def process_data(df: pd.DataFrame) -> pd.DataFrame:
    """
    Nettoie le DataFrame en gardant la ligne la plus r√©cente pour chaque 
    compteur, en s'assurant que l'index n'est pas vide.

    Logique :
    1. Convertit la colonne 'Date' au format datetime pour un tri fiable.
    2. Pour chaque 'N¬∞ compteur' unique :
        a. Trie les lignes de la plus r√©cente √† la plus ancienne.
        b. Cherche la premi√®re ligne (la plus r√©cente) o√π la colonne 'Index' n'est pas vide.
        c. Si aucune ligne n'a d'index valide, le compteur est ignor√©.
    3. Retourne un nouveau DataFrame avec les lignes s√©lectionn√©es.
    """
    
    # Copie pour √©viter de modifier le dataframe original
    df_copy = df.copy()

    # --- √âtape 1: Pr√©paration et validation des colonnes ---
    # S'assurer que les colonnes n√©cessaires existent
    required_columns = ["N¬∞ compteur", "Date", "Index"]
    if not all(col in df_copy.columns for col in required_columns):
        missing_cols = [col for col in required_columns if col not in df_copy.columns]
        st.error(f"Le fichier CSV doit contenir les colonnes suivantes : {', '.join(missing_cols)}")
        return pd.DataFrame() # Retourne un dataframe vide en cas d'erreur

    # Conversion de la colonne 'Date' en datetime. Les dates invalides deviennent NaT (Not a Time).
    # Le format de la date est inf√©r√© automatiquement avec dayfirst=True (format fran√ßais JJ/MM/AAAA privil√©gi√©)
    df_copy['Date'] = pd.to_datetime(df_copy['Date'], errors='coerce', dayfirst=True)

    # Suppression des lignes o√π la date n'a pas pu √™tre interpr√©t√©e ou est manquante
    df_copy.dropna(subset=['Date'], inplace=True)
    
    # --- √âtape 2: Logique de s√©lection ---
    
    # On trie le dataframe par N¬∞ compteur puis par Date (du plus r√©cent au plus ancien)
    df_sorted = df_copy.sort_values(by=["N¬∞ compteur", "Date"], ascending=[True, False])

    # On supprime les lignes o√π l'index est vide (NaN, None, ou cha√Æne vide)
    # pd.isna() g√®re les NaN et None. On ajoute une condition pour les cha√Ænes vides.
    df_filtered = df_sorted[pd.notna(df_sorted['Index']) & (df_sorted['Index'].astype(str).str.strip() != '')]

    # Maintenant, il suffit de garder la premi√®re occurrence de chaque 'N¬∞ compteur'
    # Comme le dataframe est d√©j√† tri√© par date d√©croissante, la premi√®re est la bonne !
    df_final = df_filtered.drop_duplicates(subset="N¬∞ compteur", keep="first")
    
    return df_final

# =============================================================================
# Interface utilisateur avec Streamlit
# =============================================================================

st.set_page_config(page_title="Nettoyeur de Donn√©es Compteur", layout="wide")

st.title("CleanCSV üßπ")
st.header("Outil de nettoyage de relev√©s de compteur")
st.markdown("""
Cette application vous permet de nettoyer vos fichiers CSV de relev√©s de compteurs en suivant une r√®gle simple :
1.  **Chargez** votre fichier CSV.
2.  L'application supprime les doublons de la colonne **"N¬∞ compteur"**.
3.  Pour chaque compteur, elle conserve **uniquement la ligne la plus r√©cente** (bas√©e sur la colonne "Date") qui poss√®de une valeur dans la colonne **"Index"**.
4.  **T√©l√©chargez** le fichier propre et pr√™t √† l'emploi !
""")

# --- Zone de chargement du fichier ---
uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")

if uploaded_file is not None:
    try:
        # Lecture du fichier CSV. Le s√©parateur ';' est courant en France.
        df_original = pd.read_csv(uploaded_file, sep=';')
        
        st.subheader("Aper√ßu des donn√©es originales")
        st.dataframe(df_original.head())

        # --- Bouton pour lancer le traitement ---
        if st.button("Nettoyer le fichier", type="primary"):
            with st.spinner("Traitement en cours..."):
                df_cleaned = process_data(df_original)
            
            st.success("Nettoyage termin√© !")
            
            st.subheader("Donn√©es nettoy√©es")
            st.dataframe(df_cleaned)

            # --- Affichage des statistiques ---
            st.metric(label="Lignes dans le fichier original", value=f"{len(df_original)}")
            st.metric(label="Lignes apr√®s nettoyage (compteurs uniques et valides)", value=f"{len(df_cleaned)}")

            # --- Zone de t√©l√©chargement ---
            # Conversion du dataframe en CSV pour le t√©l√©chargement
            csv_buffer = io.StringIO()
            df_cleaned.to_csv(csv_buffer, index=False, sep=';')
            csv_bytes = csv_buffer.getvalue().encode('utf-8')

            st.download_button(
                label="T√©l√©charger le fichier nettoy√©",
                data=csv_bytes,
                file_name="donnees_compteurs_nettoyees.csv",
                mime="text/csv",
            )

    except Exception as e:
        st.error(f"Une erreur est survenue lors de la lecture ou du traitement du fichier : {e}")
        st.warning("V√©rifiez que votre fichier est bien un CSV et que le s√©parateur est un point-virgule ';'.")
